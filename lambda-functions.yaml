AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda Functions for Pet Image Labeling System'

Parameters:
  S3StorageStackName:
    Type: String
    Description: Name of the S3 storage CloudFormation stack
    Default: pet-image-labeling-storage
  
  DynamoDBStackName:
    Type: String
    Description: Name of the DynamoDB CloudFormation stack
    Default: pet-image-labeling-database

  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing Lambda function code packages
    Default: pet-image-labeling-lambda-packages

Resources:
  # 1. Image Upload Handler Lambda Function
  ImageUploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ImageUpload"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          RAW_BUCKET: !Sub "${S3StorageStackName}-pet-images-raw"
          PROCESSED_BUCKET: !Sub "${S3StorageStackName}-pet-images-processed"
          IMAGES_TABLE: !Sub "${DynamoDBStackName}-Images"
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: "image-processor.zip"

  # S3 event notification for image uploads
  ImageUploadEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ImageUploadFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${S3StorageStackName}-pet-images-raw"

  # 2. Get Images API Handler Lambda Function
  GetImagesFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-GetImages"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          PROCESSED_BUCKET: !Sub "${S3StorageStackName}-pet-images-processed"
          IMAGES_TABLE: !Sub "${DynamoDBStackName}-Images"
      Code:
        ZipFile: |
          const { S3Client } = require("@aws-sdk/client-s3");
          const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");
          const { GetObjectCommand } = require("@aws-sdk/client-s3");
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, QueryCommand } = require("@aws-sdk/lib-dynamodb");

          exports.handler = async (event) => {
            try {
              // Create clients
              const s3Client = new S3Client({ region: process.env.AWS_REGION });
              const ddbClient = new DynamoDBClient({ region: process.env.AWS_REGION });
              const docClient = DynamoDBDocumentClient.from(ddbClient);
              
              // Parse query parameters
              const queryParams = event.queryStringParameters || {};
              const labelStatus = queryParams.status || 'unlabeled';
              const limit = parseInt(queryParams.limit) || 10;
              
              // Query DynamoDB for images with the specified label status
              const queryCommand = new QueryCommand({
                TableName: process.env.IMAGES_TABLE,
                IndexName: 'LabelStatusIndex',
                KeyConditionExpression: 'labelStatus = :status',
                ExpressionAttributeValues: {
                  ':status': labelStatus
                },
                Limit: limit
              });
              
              const result = await docClient.send(queryCommand);
              
              // Generate presigned URLs for each image
              const imagesWithUrls = await Promise.all(result.Items.map(async (image) => {
                const command = new GetObjectCommand({
                  Bucket: process.env.PROCESSED_BUCKET,
                  Key: image.thumbnailKey
                });
                
                const thumbnailUrl = await getSignedUrl(s3Client, command, { expiresIn: 3600 });
                
                return {
                  ...image,
                  thumbnailUrl
                };
              }));
              
              return {
                statusCode: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*', // Adjust for production
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(imagesWithUrls)
              };
            } catch (error) {
              console.error('Error getting images:', error);
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*', // Adjust for production
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ message: 'Error retrieving images', error: error.message })
              };
            }
          };
  
  # 3. Submit Labels API Handler Lambda Function
  SubmitLabelsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-SubmitLabels"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          IMAGES_TABLE: !Sub "${DynamoDBStackName}-Images"
          LABELS_TABLE: !Sub "${DynamoDBStackName}-Labels"
      Code:
        ZipFile: |
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, PutCommand, UpdateCommand } = require("@aws-sdk/lib-dynamodb");
          
          exports.handler = async (event) => {
            try {
              // Create clients
              const ddbClient = new DynamoDBClient({ region: process.env.AWS_REGION });
              const docClient = DynamoDBDocumentClient.from(ddbClient);
              
              // Parse request body
              const requestBody = JSON.parse(event.body);
              const { imageId, labels, labeledBy } = requestBody;
              
              if (!imageId || !labels || !Array.isArray(labels)) {
                return {
                  statusCode: 400,
                  headers: {
                    'Access-Control-Allow-Origin': '*',
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ message: 'Invalid request parameters' })
                };
              }
              
              // Insert each label into the Labels table
              const labelPromises = labels.map(label => {
                const labelId = new Date().getTime().toString(); // Simple ID generation
                const putCommand = new PutCommand({
                  TableName: process.env.LABELS_TABLE,
                  Item: {
                    imageId,
                    labelId,
                    labelType: label.type,
                    labelValue: label.value,
                    confidence: label.confidence || 1.0,
                    labeledBy,
                    labeledAt: new Date().toISOString()
                  }
                });
                return docClient.send(putCommand);
              });
              
              await Promise.all(labelPromises);
              
              // Update image status to 'labeled'
              const updateCommand = new UpdateCommand({
                TableName: process.env.IMAGES_TABLE,
                Key: { imageId },
                UpdateExpression: 'SET labelStatus = :status, lastLabeledAt = :time, lastLabeledBy = :user',
                ExpressionAttributeValues: {
                  ':status': 'labeled',
                  ':time': new Date().toISOString(),
                  ':user': labeledBy
                }
              });
              
              await docClient.send(updateCommand);
              
              return {
                statusCode: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ message: 'Labels submitted successfully' })
              };
            } catch (error) {
              console.error('Error submitting labels:', error);
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ message: 'Error submitting labels', error: error.message })
              };
            }
          };

  # 4. User Management Handler Lambda Function
  UserManagementFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-UserManagement"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          USERS_TABLE: !Sub "${DynamoDBStackName}-Users"
      Code:
        ZipFile: |
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, GetCommand, ScanCommand, PutCommand } = require("@aws-sdk/lib-dynamodb");
          
          exports.handler = async (event) => {
            try {
              // Create clients
              const ddbClient = new DynamoDBClient({ region: process.env.AWS_REGION });
              const docClient = DynamoDBDocumentClient.from(ddbClient);
              
              const { httpMethod, path, body } = event;
              const pathSegments = path.split('/');
              const resourceType = pathSegments[1]; // 'users'
              const resourceId = pathSegments[2]; // userId if present
              
              // Handle different HTTP methods
              if (httpMethod === 'GET' && resourceType === 'users' && resourceId) {
                // Get a specific user
                const getCommand = new GetCommand({
                  TableName: process.env.USERS_TABLE,
                  Key: { userId: resourceId }
                });
                
                const result = await docClient.send(getCommand);
                
                return {
                  statusCode: 200,
                  headers: { 
                    'Access-Control-Allow-Origin': '*',
                    'Content-Type': 'application/json' 
                  },
                  body: JSON.stringify(result.Item || {})
                };
              } else if (httpMethod === 'GET' && resourceType === 'users') {
                // List all users
                const scanCommand = new ScanCommand({
                  TableName: process.env.USERS_TABLE
                });
                
                const result = await docClient.send(scanCommand);
                
                return {
                  statusCode: 200,
                  headers: { 
                    'Access-Control-Allow-Origin': '*',
                    'Content-Type': 'application/json' 
                  },
                  body: JSON.stringify(result.Items || [])
                };
              } else if (httpMethod === 'POST' && resourceType === 'users') {
                // Create a new user
                const userData = JSON.parse(body);
                
                if (!userData.userId || !userData.username) {
                  return {
                    statusCode: 400,
                    headers: { 
                      'Access-Control-Allow-Origin': '*',
                      'Content-Type': 'application/json' 
                    },
                    body: JSON.stringify({ message: 'userId and username are required' })
                  };
                }
                
                const putCommand = new PutCommand({
                  TableName: process.env.USERS_TABLE,
                  Item: {
                    userId: userData.userId,
                    username: userData.username,
                    email: userData.email || '',
                    role: userData.role || 'labeler',
                    createdAt: new Date().toISOString()
                  }
                });
                
                await docClient.send(putCommand);
                
                return {
                  statusCode: 201,
                  headers: { 
                    'Access-Control-Allow-Origin': '*',
                    'Content-Type': 'application/json' 
                  },
                  body: JSON.stringify({ message: 'User created successfully' })
                };
              } else {
                return {
                  statusCode: 400,
                  headers: { 
                    'Access-Control-Allow-Origin': '*',
                    'Content-Type': 'application/json' 
                  },
                  body: JSON.stringify({ message: 'Unsupported method or resource' })
                };
              }
            } catch (error) {
              console.error('Error in user management:', error);
              return {
                statusCode: 500,
                headers: { 
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json' 
                },
                body: JSON.stringify({ message: 'Internal server error', error: error.message })
              };
            }
          };

  # 5. Dashboard Metrics Handler Lambda Function
  DashboardMetricsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-DashboardMetrics"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 15
      MemorySize: 256
      Environment:
        Variables:
          IMAGES_TABLE: !Sub "${DynamoDBStackName}-Images"
          LABELS_TABLE: !Sub "${DynamoDBStackName}-Labels"
      Code:
        ZipFile: |
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, ScanCommand } = require("@aws-sdk/lib-dynamodb");
          
          exports.handler = async (event) => {
            try {
              // Create clients
              const ddbClient = new DynamoDBClient({ region: process.env.AWS_REGION });
              const docClient = DynamoDBDocumentClient.from(ddbClient);
              
              // Get total counts from Images table
              const imagesCountCommand = new ScanCommand({
                TableName: process.env.IMAGES_TABLE,
                Select: 'COUNT'
              });
              
              const imagesResult = await docClient.send(imagesCountCommand);
              const totalImages = imagesResult.Count;
              
              // Get counts by label status
              const labeledImagesCommand = new ScanCommand({
                TableName: process.env.IMAGES_TABLE,
                FilterExpression: 'labelStatus = :status',
                ExpressionAttributeValues: {
                  ':status': 'labeled'
                },
                Select: 'COUNT'
              });
              
              const labeledImagesResult = await docClient.send(labeledImagesCommand);
              const labeledImages = labeledImagesResult.Count;
              const unlabeledImages = totalImages - labeledImages;
              
              // Get label type distribution
              const labelsCommand = new ScanCommand({
                TableName: process.env.LABELS_TABLE,
                ProjectionExpression: 'labelType, labelValue'
              });
              
              const labelsResult = await docClient.send(labelsCommand);
              
              // Calculate label type distribution
              const labelTypeDistribution = {};
              labelsResult.Items.forEach(item => {
                if (!labelTypeDistribution[item.labelType]) {
                  labelTypeDistribution[item.labelType] = {
                    total: 0,
                    values: {}
                  };
                }
                
                labelTypeDistribution[item.labelType].total += 1;
                
                if (!labelTypeDistribution[item.labelType].values[item.labelValue]) {
                  labelTypeDistribution[item.labelType].values[item.labelValue] = 0;
                }
                
                labelTypeDistribution[item.labelType].values[item.labelValue] += 1;
              });
              
              // Prepare dashboard metrics
              const metrics = {
                totalImages,
                labeledImages,
                unlabeledImages,
                completionPercentage: totalImages > 0 ? (labeledImages / totalImages * 100).toFixed(2) : 0,
                labelTypeDistribution
              };
              
              return {
                statusCode: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(metrics)
              };
            } catch (error) {
              console.error('Error generating dashboard metrics:', error);
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ message: 'Error generating metrics', error: error.message })
              };
            }
          };

  # 6. Get Upload URL Lambda Function
  GetUploadUrlFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-GetUploadUrl"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          RAW_BUCKET: !Sub "${S3StorageStackName}-pet-images-raw"
      Code:
        ZipFile: |
          const { S3Client, PutObjectCommand } = require("@aws-sdk/client-s3");
          const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");
          
          exports.handler = async (event) => {
            try {
              const s3Client = new S3Client({ region: process.env.AWS_REGION });
              const queryParams = event.queryStringParameters || {};
              const filename = queryParams.filename || `upload-${Date.now()}.jpg`;
              
              // Generate a random unique ID for the image
              const imageId = `img-${Date.now()}-${Math.floor(Math.random() * 1000000)}`;
              
              // Create the key using the image ID and original filename
              const key = `uploads/${imageId}/${filename}`;
              
              // Create the command for the S3 operation
              const command = new PutObjectCommand({
                Bucket: process.env.RAW_BUCKET,
                Key: key,
                ContentType: 'image/*'
              });
              
              // Generate a presigned URL for uploading the file
              const presignedUrl = await getSignedUrl(s3Client, command, { expiresIn: 300 });
              
              return {
                statusCode: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                  'Access-Control-Allow-Methods': 'GET,OPTIONS,PUT,POST',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  uploadUrl: presignedUrl,
                  imageId: imageId,
                  key: key
                })
              };
            } catch (error) {
              console.error('Error generating upload URL:', error);
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                  'Access-Control-Allow-Methods': 'GET,OPTIONS,PUT,POST',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  message: 'Error generating upload URL',
                  error: error.message
                })
              };
            }
          };

Outputs:
  ImageUploadFunctionArn:
    Description: "ARN of the Image Upload Lambda function"
    Value: !GetAtt ImageUploadFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ImageUploadFunctionArn"
  
  GetImagesFunctionArn:
    Description: "ARN of the Get Images Lambda function"
    Value: !GetAtt GetImagesFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GetImagesFunctionArn"
  
  SubmitLabelsFunctionArn:
    Description: "ARN of the Submit Labels Lambda function"
    Value: !GetAtt SubmitLabelsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SubmitLabelsFunctionArn"
  
  UserManagementFunctionArn:
    Description: "ARN of the User Management Lambda function"
    Value: !GetAtt UserManagementFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UserManagementFunctionArn"
  
  DashboardMetricsFunctionArn:
    Description: "ARN of the Dashboard Metrics Lambda function"
    Value: !GetAtt DashboardMetricsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DashboardMetricsFunctionArn"

  GetUploadUrlFunctionArn:
    Description: "ARN of the Get Upload URL Lambda function"
    Value: !GetAtt GetUploadUrlFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GetUploadUrlFunctionArn"