AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Web Server for Pet Image Labeling System'

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access (optional)
    Type: String
    Default: "pet-image-labeler-key"
  
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.micro
      - t3.small
      - t3.medium
  
  ApiGatewayStackName:
    Type: String
    Description: Name of the API Gateway CloudFormation stack
    Default: pet-image-labeling-api
  
  AuthStackName:
    Type: String
    Description: Name of the Cognito authentication CloudFormation stack
    Default: pet-image-labeling-auth

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, ""]]

Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
      ImageId: ami-08b5b3a93ed654d19  # Amazon Linux 2023 in us-east-1
      IamInstanceProfile: "LabInstanceProfile"
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - |
                #!/bin/bash -xe
                # Redirect all output to log file for debugging
                exec > >(tee /var/log/user-data.log) 2>&1
                echo "Starting user data script execution at $(date)"
                
                # Update system and install dependencies
                echo "Updating system packages..."
                yum update -y
                echo "Installing required packages..."
                yum install -y git nodejs npm nginx
                
                # Create swap space to handle memory-intensive operations
                echo "Creating swap space..."
                dd if=/dev/zero of=/swapfile bs=1M count=2048
                chmod 600 /swapfile
                mkswap /swapfile
                swapon /swapfile
                echo '/swapfile swap swap defaults 0 0' >> /etc/fstab
                
                # Create deployment directory
                echo "Creating web directory..."
                mkdir -p /var/www/html
                
                # Clone the repository
                echo "Cloning repository..."
                git clone https://github.com/hxu47/pet-image-labeler.git /tmp/pet-image-labeler || {
                  echo "Failed to clone repository"
                  exit 1
                }
                
              - !Sub |
                # Get config values from CloudFormation
                echo "Getting configuration values from CloudFormation..."
                API_URL=$(aws cloudformation describe-stacks --stack-name ${ApiGatewayStackName} --query "Stacks[0].Outputs[?OutputKey=='ApiURL'].OutputValue" --output text)
                USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name ${AuthStackName} --query "Stacks[0].Outputs[?OutputKey=='UserPoolId'].OutputValue" --output text)
                USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name ${AuthStackName} --query "Stacks[0].Outputs[?OutputKey=='UserPoolClientId'].OutputValue" --output text)
                IDENTITY_POOL_ID=$(aws cloudformation describe-stacks --stack-name ${AuthStackName} --query "Stacks[0].Outputs[?OutputKey=='IdentityPoolId'].OutputValue" --output text)
                
                if [ -z "$API_URL" ] || [ -z "$USER_POOL_ID" ] || [ -z "$USER_POOL_CLIENT_ID" ] || [ -z "$IDENTITY_POOL_ID" ]; then
                  echo "Failed to get one or more configuration values"
                  echo "API_URL: $API_URL"
                  echo "USER_POOL_ID: $USER_POOL_ID"
                  echo "USER_POOL_CLIENT_ID: $USER_POOL_CLIENT_ID"
                  echo "IDENTITY_POOL_ID: $IDENTITY_POOL_ID"
                  exit 1
                fi
                
              - |
                # Create config.js file
                echo "Creating config.js file..."
                cat > /tmp/pet-image-labeler/pet-image-labeling-webapp/src/config.js << 'EOF'
                import { Amplify, Auth } from 'aws-amplify';

                Amplify.configure({
                  Auth: {
                    region: 'us-east-1',
                    userPoolId: 'USER_POOL_ID_PLACEHOLDER',
                    userPoolWebClientId: 'USER_POOL_CLIENT_ID_PLACEHOLDER',
                    identityPoolId: 'IDENTITY_POOL_ID_PLACEHOLDER'
                  },
                  API: {
                    endpoints: [
                      {
                        name: 'api',
                        endpoint: 'API_URL_PLACEHOLDER',
                        custom_header: async () => {
                          try {
                            const session = await Auth.currentSession();
                            return { Authorization: `Bearer ${session.getIdToken().getJwtToken()}` };
                          } catch (e) {
                            return {};
                          }
                        }
                      }
                    ]
                  }
                });

                export const config = { 
                  apiUrl: 'API_URL_PLACEHOLDER',
                  cognito: {
                    region: 'us-east-1',
                    userPoolId: 'USER_POOL_ID_PLACEHOLDER',
                    userPoolClientId: 'USER_POOL_CLIENT_ID_PLACEHOLDER',
                    identityPoolId: 'IDENTITY_POOL_ID_PLACEHOLDER'
                  },
                  labelTypes: [
                    { id: 'type', name: 'Pet Type', options: ['Dog', 'Cat', 'Bird', 'Rabbit', 'Rodent', 'Reptile', 'Fish', 'Other'] },
                    { id: 'breed', name: 'Breed', options: [
                      'Labrador Retriever', 'German Shepherd', 'Golden Retriever', 'Bulldog', 'Beagle', 'Poodle',
                      'Persian', 'Maine Coon', 'Siamese', 'Bengal', 'Ragdoll', 'Sphynx',
                      'Parakeet', 'Cockatiel', 'Lop Rabbit', 'Netherland Dwarf', 'Hamster', 'Guinea Pig', 'Other'
                    ] },
                    { id: 'age', name: 'Age', options: ['Kitten/Puppy (0-1 year)', 'Young Adult (1-3 years)', 'Adult (3-7 years)', 'Senior (7+ years)'] },
                    { id: 'coat', name: 'Coat Color', options: ['Black', 'White', 'Brown', 'Tan', 'Gray', 'Orange', 'Calico', 'Tabby', 'Brindle', 'Spotted', 'Mixed'] },
                    { id: 'health', name: 'Health Condition', options: ['None visible', 'Skin condition', 'Eye condition', 'Lameness', 'Dental issue', 'Overweight', 'Underweight'] }
                  ]
                };
                EOF

                # Replace placeholders with actual values
                echo "Replacing configuration placeholders..."
                sed -i "s|USER_POOL_ID_PLACEHOLDER|$USER_POOL_ID|g" /tmp/pet-image-labeler/pet-image-labeling-webapp/src/config.js
                sed -i "s|USER_POOL_CLIENT_ID_PLACEHOLDER|$USER_POOL_CLIENT_ID|g" /tmp/pet-image-labeler/pet-image-labeling-webapp/src/config.js
                sed -i "s|IDENTITY_POOL_ID_PLACEHOLDER|$IDENTITY_POOL_ID|g" /tmp/pet-image-labeler/pet-image-labeling-webapp/src/config.js
                sed -i "s|API_URL_PLACEHOLDER|$API_URL|g" /tmp/pet-image-labeler/pet-image-labeling-webapp/src/config.js
                
                # Build the React app
                echo "Building React application..."
                cd /tmp/pet-image-labeler/pet-image-labeling-webapp
                npm install || {
                  echo "npm install failed"
                  exit 1
                }
                
                npm run build || {
                  echo "npm build failed"
                  exit 1
                }
                
                # Deploy the built app
                echo "Deploying built application..."
                cp -r build/* /var/www/html/ || {
                  echo "Failed to copy build files"
                  exit 1
                }
                
                # Configure Nginx
                echo "Configuring Nginx..."
                cat > /etc/nginx/nginx.conf << 'EOF'
                user nginx;
                worker_processes auto;
                error_log /var/log/nginx/error.log;
                pid /run/nginx.pid;

                events {
                    worker_connections 1024;
                }

                http {
                    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                      '$status $body_bytes_sent "$http_referer" '
                                      '"$http_user_agent" "$http_x_forwarded_for"';

                    access_log  /var/log/nginx/access.log  main;

                    sendfile            on;
                    tcp_nopush          on;
                    tcp_nodelay         on;
                    keepalive_timeout   65;
                    types_hash_max_size 4096;

                    include             /etc/nginx/mime.types;
                    default_type        application/octet-stream;

                    server {
                        listen       80 default_server;
                        listen       [::]:80 default_server;
                        server_name  _;
                        root         /var/www/html;

                        # Support React Router
                        location / {
                            try_files $uri $uri/ /index.html;
                            index index.html;
                        }

                        error_page 404 /index.html;
                        error_page 500 502 503 504 /50x.html;
                    }
                }
                EOF
                
                # Remove default Nginx configuration if it exists
                rm -f /etc/nginx/conf.d/default.conf
                
                # Start and enable Nginx
                echo "Starting Nginx..."
                systemctl start nginx
                systemctl enable nginx
                
                echo "Deployment completed at $(date)"

Outputs:
  WebsiteURL:
    Description: URL for the website
    Value: !Sub http://${WebServerInstance.PublicDnsName}
  
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt WebServerInstance.PublicIp