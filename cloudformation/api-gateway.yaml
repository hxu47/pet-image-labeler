AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway for Pet Image Labeling System'

Parameters:
  LambdaStackName:
    Type: String
    Description: Name of the Lambda functions CloudFormation stack
    Default: pet-image-labeling-functions
    
  AuthStackName:
    Type: String
    Description: Name of the Cognito authentication CloudFormation stack
    Default: pet-image-labeling-auth
  
  CorsOrigin:
    Type: String
    Description: Origin to allow for CORS
    Default: '*'

Resources:
  # API Gateway REST API
  PetLabelingAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}-API"
      Description: "API for Pet Image Labeling System"
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Cognito Authorizer for API Gateway (using User Pool directly)
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoUserPoolAuthorizer
      RestApiId: !Ref PetLabelingAPI
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !Sub 
          - "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"
          - UserPoolId: 
              Fn::ImportValue: !Sub "${AuthStackName}-UserPoolId"

  # API Gateway Resource: /images
  ImagesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !GetAtt PetLabelingAPI.RootResourceId
      PathPart: "images"

  # API Gateway Method: GET /images
  GetImagesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref ImagesResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-GetImages/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
      
  # Enable CORS for /images
  ImagesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref ImagesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Resource: /labels
  LabelsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !GetAtt PetLabelingAPI.RootResourceId
      PathPart: "labels"

  # API Gateway Method: POST /labels
  PostLabelsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref LabelsResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-SubmitLabels/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /labels
  LabelsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref LabelsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Resource: /metrics
  MetricsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !GetAtt PetLabelingAPI.RootResourceId
      PathPart: "metrics"

  # API Gateway Method: GET /metrics
  GetMetricsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref MetricsResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-DashboardMetrics/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /metrics
  MetricsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref MetricsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Resource: /upload-url
  UploadUrlResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !GetAtt PetLabelingAPI.RootResourceId
      PathPart: "upload-url"

  # API Gateway Method: GET /upload-url
  GetUploadUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref UploadUrlResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-GetUploadUrl/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /upload-url
  UploadUrlOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref UploadUrlResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Resource: /users
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !GetAtt PetLabelingAPI.RootResourceId
      PathPart: "users"

  # API Gateway Resource: /users/{userId}
  UserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !Ref UsersResource
      PathPart: "{userId}"

  # API Gateway Method: GET /users/{userId}
  GetUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref UserResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-GetUser/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /users/{userId}
  UserOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref UserResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Resource: /users/{userId}/statistics
  UserStatisticsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !Ref UserResource
      PathPart: "statistics"

  # API Gateway Method: GET /users/{userId}/statistics
  GetUserStatisticsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref UserStatisticsResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-GetUserStatistics/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /users/{userId}/statistics
  UserStatisticsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref UserStatisticsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Resource: /users/{userId}/activity
  UserActivityResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !Ref UserResource
      PathPart: "activity"

  # API Gateway Method: GET /users/{userId}/activity
  GetUserActivityMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref UserActivityResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-GetUserActivity/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /users/{userId}/activity
  UserActivityOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref UserActivityResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Resource: /admin
  AdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !GetAtt PetLabelingAPI.RootResourceId
      PathPart: "admin"

  # API Gateway Resource: /admin/users
  AdminUsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !Ref AdminResource
      PathPart: "users"

  # API Gateway Method: GET /admin/users
  GetAllUsersMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref AdminUsersResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-GetAllUsers/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /admin/users
  AdminUsersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref AdminUsersResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            
  # API Gateway Resource: /admin/users/{userId}
  AdminUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !Ref AdminUsersResource
      PathPart: "{userId}"

  # API Gateway Resource: /admin/users/{userId}/role
  AdminUserRoleResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ParentId: !Ref AdminUserResource
      PathPart: "role"

  # API Gateway Method: POST /admin/users/{userId}/role
  UpdateUserRoleMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref AdminUserRoleResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaStackName}-UpdateUserRole/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Enable CORS for /admin/users/{userId}/role
  AdminUserRoleOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PetLabelingAPI
      ResourceId: !Ref AdminUserRoleResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetImagesMethod
      - ImagesOptionsMethod
      - PostLabelsMethod
      - LabelsOptionsMethod
      - GetMetricsMethod
      - MetricsOptionsMethod
      - GetUploadUrlMethod
      - UploadUrlOptionsMethod
      - GetUserMethod
      - UserOptionsMethod
      - GetUserStatisticsMethod
      - UserStatisticsOptionsMethod
      - GetUserActivityMethod
      - UserActivityOptionsMethod
      - GetAllUsersMethod
      - AdminUsersOptionsMethod
      - UpdateUserRoleMethod
      - AdminUserRoleOptionsMethod
    Properties:
      RestApiId: !Ref PetLabelingAPI
      StageName: prod

  # Lambda permissions for API Gateway
  GetImagesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LambdaStackName}-GetImages"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PetLabelingAPI}/*/GET/images"

  SubmitLabelsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LambdaStackName}-SubmitLabels"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PetLabelingAPI}/*/POST/labels"

  DashboardMetricsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LambdaStackName}-DashboardMetrics"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PetLabelingAPI}/*/GET/metrics"

  GetUploadUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LambdaStackName}-GetUploadUrl"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PetLabelingAPI}/*/GET/upload-url"
        
  # Lambda permission for user endpoints
  GetUserPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LambdaStackName}-GetUser"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PetLabelingAPI}/*/GET/users/{userId}"

  GetUserStatisticsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LambdaStackName}-GetUserStatistics"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PetLabelingAPI}/*/GET/users/{userId}/statistics"

  GetUserActivityPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LambdaStackName}-GetUserActivity" 
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PetLabelingAPI}/*/GET/users/{userId}/activity"

  # Lambda permission for admin endpoints
  GetAllUsersPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LambdaStackName}-GetAllUsers"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PetLabelingAPI}/*/GET/admin/users"

  UpdateUserRolePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub "${LambdaStackName}-UpdateUserRole"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PetLabelingAPI}/*/POST/admin/users/{userId}/role"
      
Outputs:
  ApiURL:
    Description: "URL of the API Gateway"
    Value: !Sub "https://${PetLabelingAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: !Sub "${AWS::StackName}-ApiURL"
  
  ApiId:
    Description: "ID of the API Gateway"
    Value: !Ref PetLabelingAPI
    Export:
      Name: !Sub "${AWS::StackName}-ApiId"