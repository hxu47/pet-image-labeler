AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda Functions for Pet Image Labeling System'

Parameters:
  S3StorageStackName:
    Type: String
    Description: Name of the S3 storage CloudFormation stack
    Default: pet-image-labeling-storage
  
  DynamoDBStackName:
    Type: String
    Description: Name of the DynamoDB CloudFormation stack
    Default: pet-image-labeling-database

  AuthStackName:
    Type: String
    Description: Name of the Cognito authentication CloudFormation stack
    Default: pet-image-labeling-auth
    
  SNSStackName:
    Type: String
    Description: Name of the SNS integration CloudFormation stack
    Default: pet-image-labeling-sns

  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing Lambda function code packages
    Default: pet-image-labeling-lambda-packages

Resources:
  # Cognito Token Utility Lambda Layer
  CognitoTokenLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-CognitoToken"
      Description: Common functions for handling Cognito tokens
      Content:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: cognito-token-util.zip
      CompatibleRuntimes:
        - nodejs18.x

  # Monitoring Utility Lambda Layer
  MonitoringUtilLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-MonitoringUtil"
      Description: Monitoring and notification utilities
      Content:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: monitoring-util.zip
      CompatibleRuntimes:
        - nodejs18.x

  # Get Images API Handler Lambda Function
  GetImagesFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-GetImages"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Layers:
        - !Ref CognitoTokenLayer
      Environment:
        Variables:
          PROCESSED_BUCKET: !Sub "${S3StorageStackName}-pet-images-processed"
          RAW_BUCKET: !Sub "${S3StorageStackName}-pet-images-raw"
          IMAGES_TABLE: !Sub "${DynamoDBStackName}-Images"
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: get-images.zip

  # Submit Labels API Handler Lambda Function
  SubmitLabelsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-SubmitLabels"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Layers:
        - !Ref CognitoTokenLayer
        - !Ref MonitoringUtilLayer
      Environment:
        Variables:
          IMAGES_TABLE: !Sub "${DynamoDBStackName}-Images"
          LABELS_TABLE: !Sub "${DynamoDBStackName}-Labels"
          USER_POOL_ID: 
            Fn::ImportValue: !Sub "${AuthStackName}-UserPoolId"
          LABEL_SUBMISSION_TOPIC_ARN: 
            Fn::ImportValue: !Sub "${SNSStackName}-LabelSubmissionTopicArn"
          SYSTEM_ALERTS_TOPIC_ARN:
            Fn::ImportValue: !Sub "${SNSStackName}-SystemAlertsTopicArn"
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: submit-labels.zip

  # Dashboard Metrics Handler Lambda Function
  DashboardMetricsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-DashboardMetrics"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 15
      MemorySize: 256
      Layers:
        - !Ref CognitoTokenLayer
      Environment:
        Variables:
          IMAGES_TABLE: !Sub "${DynamoDBStackName}-Images"
          LABELS_TABLE: !Sub "${DynamoDBStackName}-Labels"
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: dashboard-metrics.zip

  # Get Upload URL Lambda Function
  GetUploadUrlFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-GetUploadUrl"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Layers:
        - !Ref CognitoTokenLayer
      Environment:
        Variables:
          RAW_BUCKET: !Sub "${S3StorageStackName}-pet-images-raw"
          IMAGE_UPLOAD_TOPIC_ARN: 
            Fn::ImportValue: !Sub "${SNSStackName}-ImageUploadTopicArn"
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: get-upload-url.zip

  # Image Upload Lambda Function
  ImageUploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ImageUpload"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 512
      Layers:
        - !Ref MonitoringUtilLayer
      Environment:
        Variables:
          RAW_BUCKET: !Sub "${S3StorageStackName}-pet-images-raw"
          PROCESSED_BUCKET: !Sub "${S3StorageStackName}-pet-images-processed"
          IMAGES_TABLE: !Sub "${DynamoDBStackName}-Images"
          IMAGE_UPLOAD_TOPIC_ARN: 
            Fn::ImportValue: !Sub "${SNSStackName}-ImageUploadTopicArn"
          SYSTEM_ALERTS_TOPIC_ARN: 
            Fn::ImportValue: !Sub "${SNSStackName}-SystemAlertsTopicArn"
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: image-upload.zip

  # Get User API Handler Lambda Function
  GetUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-GetUser"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Layers:
        - !Ref CognitoTokenLayer
      Environment:
        Variables:
          USERS_TABLE: !Sub "${DynamoDBStackName}-Users"
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: get-user.zip

  # Get User Statistics API Handler Lambda Function
  GetUserStatisticsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-GetUserStatistics"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Layers:
        - !Ref CognitoTokenLayer
      Environment:
        Variables:
          USERS_TABLE: !Sub "${DynamoDBStackName}-Users"
          IMAGES_TABLE: !Sub "${DynamoDBStackName}-Images"
          LABELS_TABLE: !Sub "${DynamoDBStackName}-Labels"
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: get-user-statistics.zip

  # Get User Activity API Handler Lambda Function
  GetUserActivityFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-GetUserActivity"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Layers:
        - !Ref CognitoTokenLayer
      Environment:
        Variables:
          IMAGES_TABLE: !Sub "${DynamoDBStackName}-Images"
          LABELS_TABLE: !Sub "${DynamoDBStackName}-Labels"
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: get-user-activity.zip

  # Get All Users Lambda Function
  GetAllUsersFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-GetAllUsers"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Layers:
        - !Ref CognitoTokenLayer
      Environment:
        Variables:
          USER_POOL_ID: 
            Fn::ImportValue: !Sub "${AuthStackName}-UserPoolId"
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: get-all-users.zip

  # Update User Role Lambda Function
  UpdateUserRoleFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-UpdateUserRole"
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Layers:
        - !Ref CognitoTokenLayer
      Environment:
        Variables:
          USER_POOL_ID: 
            Fn::ImportValue: !Sub "${AuthStackName}-UserPoolId"
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: update-user-role.zip

Outputs:
  ImageUploadFunctionArn:
    Description: "ARN of the Image Upload Lambda function"
    Value: !GetAtt ImageUploadFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ImageUploadFunctionArn"
  
  GetImagesFunctionArn:
    Description: "ARN of the Get Images Lambda function"
    Value: !GetAtt GetImagesFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GetImagesFunctionArn"
  
  SubmitLabelsFunctionArn:
    Description: "ARN of the Submit Labels Lambda function"
    Value: !GetAtt SubmitLabelsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SubmitLabelsFunctionArn"
  
  DashboardMetricsFunctionArn:
    Description: "ARN of the Dashboard Metrics Lambda function"
    Value: !GetAtt DashboardMetricsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DashboardMetricsFunctionArn"

  GetUploadUrlFunctionArn:
    Description: "ARN of the Get Upload URL Lambda function"
    Value: !GetAtt GetUploadUrlFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GetUploadUrlFunctionArn"

  GetUserFunctionArn:
    Description: "ARN of the Get User Lambda function"
    Value: !GetAtt GetUserFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GetUserFunctionArn"
  
  GetUserStatisticsFunctionArn:
    Description: "ARN of the Get User Statistics Lambda function"
    Value: !GetAtt GetUserStatisticsFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GetUserStatisticsFunctionArn"
  
  GetUserActivityFunctionArn:
    Description: "ARN of the Get User Activity Lambda function"
    Value: !GetAtt GetUserActivityFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GetUserActivityFunctionArn"

  GetAllUsersFunctionArn:
      Description: "ARN of the Get All Users Lambda function"
      Value: !GetAtt GetAllUsersFunction.Arn
      Export:
        Name: !Sub "${AWS::StackName}-GetAllUsersFunctionArn"
    
  UpdateUserRoleFunctionArn:
    Description: "ARN of the Update User Role Lambda function"
    Value: !GetAtt UpdateUserRoleFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UpdateUserRoleFunctionArn"